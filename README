


before testing the software be sure that you have a porpper configured 
Irda device.
You can test this by running 
	# irdadump 
and place your polar watch to the transceiver.


do not install the software, just compile and execute it.

first go to src/polarhrm_config.h and edit the 
MYPATH value to a writable directory

then run

	./configure
	make
	cd src
	./polarhrm s625x

or 
	./polarhrm rs800cx


note: you may get an error when building "no route to target" at the end of make 
command.
however, check the src dir if the binaries are built.


process this will have the following result:

*)connect the watch (s625X / rs800cx)
*)transfer all sessions to the computer (s625X / rs800cx)
*)dump raw data to a files (s625X / rs800cx)
*)parse all knowen data, and print them to screen (s625X / rs800cx)
*)write HRM file (s625X)

to read an existing dump file run 

./polarhrm s625x -r /home/thomas/praw/2011-7-22_8_46.dump

or

./polarhrm rs800cx -r /path/to/dumpfile.dump


==================

testprogram:
	just for testing objects & code snippets




MORE SAMPLE DATA is needed!

cycling with power
and interval tranining for s625x is needed


==================


Development

your watch is not soppurted by now and you want to implement it?
here I wirte some ideas of the concept to add a new device:


	connection type:
		the watch uses some transfare method to get data out ouf the watch.
		as far as I know soniclink, IR and IRda connections have allready been 
		implemented. (various projects)
		new devices use other connection type such as flowlink. (no implemention yet)

		polarhrm now to easily bring all the different connection types and devices
		together.
		for now I wrote the application driver for irda but the class model of 
		polarhrm gives the opportunity to add other application drivers.

		see the apstract driver class


	devices:
		each device has its own dir to put related source
		classes used for all watches are in watch folder

		a new device should inheritance the apstract watch class
		communication should be seperated from parsing
		parsing should result in standard watch objects

		for saving a hrm file it should use the watch/hrmfile class 
		if the device requires special output it should be implemented
		in the same file (if monitor=number) - other devices could also need
		this implementation
		
		getting data out of the watch
			TODO see wiki
			
		parsing data
			once you have a dump of raw data you can go stating the parsing
			the best is to do step by step.
			make small sessions that have only minor changes. 
			only one setting. 
			then the hard time comes.
			compare them with tools, and write the session parsing function
			tools:	meld (gnome),
					vbindiff (command line), 

==================
current issues:
	section moved to TODO.tasks file
	
	since I moved to anjuta 3.2.0 I don t have the convinient edit plug in
	so I am thinking of putting my tasks back here.
	